# Task: Grade Book Smart Contract using Solidity
# Objective: Develop a smart contract in Solidity for managing student grades.
# Requirements:
# Structs: Define a struct named Grade with fields studentName, subject, and grade to store student grade information.
# Array: Utilize an array to store instances of the Grade struct, representing grades for multiple students.
# Modifiers: Implement a modifier named onlyOwner to restrict functions (e.g., adding or updating grades) to be accessible only by the contract owner.
# Constructor: Create a constructor to initialize the contract owner (instructor) 
# Functions:
# addGrade: Function to add a new grade entry for a student.
# updateGrade: Function to update the grade of a student for a specific subject.
# getGrade: Function to retrieve the grade of a student for a particular subject.
# averageGrade: Function to calculate and return the average grade of all students for a specific subject.
# Instructions:
# Use the provided structure and functionalities to develop the contract using Solidity.
# Ensure that only the contract owner (instructor) can modify grade entries using the onlyOwner modifier.
# Test the contract thoroughly to ensure accurate functionality in storing, updating, retrieving, and calculating student grades.
#########################################################################################################################################################################################
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract GradeBook {
    struct Grade {
        string studentName;
        string subject;
        uint8 grade;
    }

    Grade[] public grades;
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    function addGrade(string memory _studentName, string memory _subject, uint8 _grade) public onlyOwner {
        require(_grade <= 100, "Grade must be between 0 and 100");
        grades.push(Grade(_studentName, _subject, _grade));
    }

    function updateGrade(uint256 _index, uint8 _newGrade) public onlyOwner {
        require(_index < grades.length, "Invalid grade index");
        require(_newGrade <= 100, "Grade must be between 0 and 100");
        grades[_index].grade = _newGrade;
    }

    function getGrade(string memory _studentName, string memory _subject) public view returns (uint8) {
        for (uint i = 0; i < grades.length; i++) {
            if (keccak256(abi.encodePacked(grades[i].studentName)) == keccak256(abi.encodePacked(_studentName)) &&
                keccak256(abi.encodePacked(grades[i].subject)) == keccak256(abi.encodePacked(_subject))) {
                return grades[i].grade;
            }
        }
        revert("Grade not found");
    }

    function averageGrade(string memory _subject) public view returns (uint8) {
        uint256 total = 0;
        uint256 count = 0;
        
        for (uint i = 0; i < grades.length; i++) {
            if (keccak256(abi.encodePacked(grades[i].subject)) == keccak256(abi.encodePacked(_subject))) {
                total += grades[i].grade;
                count++;
            }
        }
        
        require(count > 0, "No grades found for the subject");
        return uint8(total / count);
    }
}
################################################################################################# THE END #########################################################################################################
